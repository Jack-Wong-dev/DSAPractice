//Floyd's Algo
func hasCycle(_ head: ListNode?) -> Bool {
    
    var slow: ListNode? = head
    var fast: ListNode? = head
    
    while fast != nil && fast?.next != nil {
        slow = slow?.next
        fast = fast?.next?.next
        if fast === slow {
            return true
        }
    }
    return false
}

//Brent's Algo
func hasCycle(_ head: ListNode?) -> Bool {
    var turtle: ListNode? = head
    var bunny: ListNode? = head
    var stepsTaken = 0
    var stepLimit = 2
    
    while true {
        if bunny == nil{
            return false
        }
        bunny = bunny?.next
        
        stepsTaken += 1
        
        if bunny === turtle{
            return true
        }
        
        if stepsTaken == stepLimit {
            stepsTaken = 0
            stepLimit *= 2
            //teleport turtle
            turtle = bunny
        }
    }
}
